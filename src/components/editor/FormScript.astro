<script>
  function handleGroup(item: Element) {
    let parentKey = item.getAttribute("data-parent");
    if (!parentKey) {
      return;
    }
    let childs = [
      ...item.querySelectorAll(`:scope [data-parent="${parentKey}"]`).values(),
    ];
    let inputs = childs.filter(
      (x) => x.tagName !== "FIELDSET",
    ) as HTMLInputElement[];
    let frames = childs.filter(
      (x) => x.tagName === "FIELDSET",
    ) as HTMLFieldSetElement[];
    if (inputs.length == 0 || frames.length === 0) {
    }
    inputs.forEach((iel) => {
      iel.addEventListener("change", function (ev) {
        let inputData: any = {};
        inputs.forEach((iiel) => {
          let name = iiel.getAttribute("name") || "";
          name = name?.substring(parentKey.length + 1);
          inputData[name] = iiel.value;
        });
        frames.forEach((fel) => {
          let fnBody = fel.getAttribute("data-if");
          if (!fnBody) {
            return;
          }
          let fn = new Function("value", fnBody);
          let cond = !!fn(inputData);
          if (cond) {
            fel.classList.remove("hidden");
            fel.disabled = false;
          } else {
            fel.classList.add("hidden");
            fel.disabled = true;
          }
        });
      });
    });
  }
  // @ts-ignore
  window.deleteItem = function deleteItem(button: HTMLButtonElement) {
    let item = button.closest(".oneform-list-item");
    let list = button.closest(".oneform-list");
    if (!item || !list || item.classList.contains("oneform-list-proto")) {
      return;
    }
    let index = parseInt(item.getAttribute("data-index") || "");
    if (isNaN(index)) return;
    item.remove();
    let parentKey = list.id;
    let childs = [
      ...list
        .querySelectorAll(
          `:scope .oneform-list-item:not(.oneform-list-proto)[data-list-parent="${parentKey}"]`,
        )
        .values(),
    ];
    childs.forEach((child) => {
      let cIndex = parseInt(child.getAttribute("data-index") || "");
      if (cIndex < index) {
        return;
      }
      child.setAttribute("data-index", cIndex - 1 + "");
      let findRegex = new RegExp(`^${parentKey}\.${cIndex}`);
      let replaceTo = parentKey + "." + (cIndex - 1);

      let parameters = ["name", "id", "data-parent", "data-list-parent"];
      for (const param of parameters) {
        let items = child.querySelectorAll(`:scope [${param}^="${parentKey}"]`);
        items.forEach((item) => {
          let value = item.getAttribute(param) || "";
          value = value.replace(findRegex, replaceTo);
          item.setAttribute(param, value);
        });
      }
    });
  };
  // @ts-ignore
  window.appendItem = function appendItem(button: HTMLButtonElement) {
    let list = button.closest(".oneform-list");
    let parentKey = list?.id;
    let entry = list?.querySelector(
      `:scope .oneform-list-entries[data-list-parent="${parentKey}"]`,
    );
    let proto = list?.querySelector(
      `:scope .oneform-list-proto[data-list-parent="${parentKey}"]`,
    );
    if (!list || !entry || !proto) return;
    let len = entry.children.length;
    let cloned = proto.cloneNode(true) as HTMLElement;
    entry.append(cloned);
    cloned.classList.remove("oneform-list-proto");
    cloned.setAttribute("data-index", len + "");
    let findRegex = new RegExp(`^${parentKey}\\.\\[\\]`);
    let replaceTo = parentKey + "." + len;
    let parameters = ["name", "id", "data-parent", "data-list-parent"];
    for (const param of parameters) {
      let items = cloned.querySelectorAll(`:scope [${param}^="${parentKey}"]`);
      items.forEach((item) => {
        let value = item.getAttribute(param) || "";
        value = value.replace(findRegex, replaceTo);
        item.setAttribute(param, value);
      });
    }
    cloned.querySelectorAll(`:scope .oneform-group`).forEach(handleGroup);
  };
  document.addEventListener("DOMContentLoaded", async function (event) {
    document.querySelectorAll(".oneform-group").forEach(handleGroup);
  });
</script>
