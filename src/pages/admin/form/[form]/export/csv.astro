---
import { backToLogin } from "@/components/helper";
import { flatten } from "flat";
import papaparse from "papaparse";
const { unparse } = papaparse;
import query from "@/lib/query";
import { getTeam } from "@/lib/auth";

const team = await getTeam(Astro.request);
if (!team) {
  return backToLogin();
}

const { form: formId } = Astro.params;

const teamId = await getTeam(Astro.request);
if (!teamId) {
  return backToLogin();
}

if (!formId) {
  return notFound();
}

const form = await query.getFormById(formId);
if (!form || form.teamId != teamId) {
  return notFound();
}

const entryList = await query.getEntryListByFormId(formId);

function renameKey(data: any, schema: any[]) {
  let obj: Record<string, any> = {};
  if (!Array.isArray(schema)) {
    return obj;
  }
  for (const item of schema) {
    if (item.type === "group") {
      if (item.id) {
        if (item.label) {
          obj[item.label] = renameKey(data[item.id], item.children);
        }
      } else {
        Object.assign(obj, renameKey(data, item.children));
      }
    } else if (item.type === "list") {
      if (item.id && item.label) {
        obj[item.label] = renameKey(data[item.id], [item.child]);
      }
    } else if (item.label) {
      obj[item.label] = data[item.id];
    }
  }
  return obj;
}

const entryCSV = [];
for (const entry of entryList) {
  entryCSV.push(flatten(renameKey(entry.data, form.schema as any[])));
}

return new Response(
  unparse(entryCSV, {
    header: true,
  }),
  {
    headers: {
      "content-type": "text/csv",
    },
  }
);
---
