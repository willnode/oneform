---
import { Form, Format, db, eq, and, Hook } from "astro:db";
import Layout from "@/layouts/Layout.astro";
import { backTo, backToLogin, notFound } from "@/components/helper";
import FormNavbar from "@/components/editor/FormNavbar.tsx";
import { ulid } from "ulid";
import query from "@/lib/query";
import { getTeam } from "@/lib/auth";
import FormConfig from "./_config";

const team = await getTeam(Astro.request);
if (!team) {
  return backToLogin();
}

const { form: formId } = Astro.params;

const teamId = await getTeam(Astro.request);
if (!teamId) {
  return backToLogin();
}

if (!formId) {
  return notFound();
}

const form = await query.getFormById(formId);
if (!form || form.teamId != teamId) {
  return notFound();
}

if (Astro.request.method === "DELETE") {
  await db.delete(Format).where(eq(Format.formId, formId));
  return "";
} else if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const id = ulid();
  await db.insert(Format).values({
    formId,
    privilenge: form.privilenge,
    schema: {},
    teamId: form.teamId,
    title: "Create New Format " + data.get("type")?.toString(),
    type: data.get("type")?.toString() || "",
    id,
  });
  return backTo(`/view/${id}/edit`);
}

const formatList = await db
  .select()
  .from(Format)
  .where(eq(Format.formId, formId));

const hookList = await db.select().from(Hook).where(eq(Hook.formId, formId));
---

<Layout title="Form config">
  <FormNavbar page="config" />
  <FormConfig formatList={formatList} client:load />
</Layout>
