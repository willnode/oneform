---
import Layout from "@/layouts/Layout.astro";
import FormScript from "@/components/editor/FormScript.astro";

const { entry: entryID } = Astro.params;

import { Form, Entry, db, eq, Hook } from "astro:db";
import Group from "@/components/control/Group.astro";
import { notFound } from "@/components/helper";
import { Format } from "astro:db";

if (!entryID) {
  return notFound();
}

const entryList = await db.select().from(Entry).where(eq(Entry.id, entryID));
if (entryList.length === 0) {
  return notFound();
}
const entry = entryList[0];

const formList = await db.select().from(Form).where(eq(Form.id, entry.formId));
if (formList.length === 0) {
  return notFound();
}

const form = formList[0];
const formatList = await db
  .select()
  .from(Format)
  .where(eq(Format.formId, form.id));
---

<Layout title="View Form">
  <div class="container my-5" style="max-width: 800px;">
    <a class="btn btn-warning" href=`/form/${form.id}/entries`
      >Back to Entries</a
    >
    <form id="form" class="my-5">
      <h1 class="display-4">{form.title}</h1>
      <div class="alert">
        Display as new format
        {
          formatList.map((x) => (
            <a
              href={`/format/${x.id}/entry/${entry.id}/view`}
              class="btn btn-primary"
            >
              {x.title}
            </a>
          ))
        }
        Or
        <a href={`/form/${form.id}/formats`} class="btn btn-success">
          create new format</a
        >
      </div>
      <fieldset disabled>
        <Group control={{ children: form.schema }} value={entry.data} />
      </fieldset>
    </form>
  </div>
</Layout>

<FormScript />
